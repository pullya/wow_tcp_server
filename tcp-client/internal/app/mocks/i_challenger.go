// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IChallenger is an autogenerated mock type for the IChallenger type
type IChallenger struct {
	mock.Mock
}

// GenerateSolution provides a mock function with given fields: ctx, challenge
func (_m *IChallenger) GenerateSolution(ctx context.Context, challenge string) string {
	ret := _m.Called(ctx, challenge)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSolution")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, challenge)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetPowDifficulty provides a mock function with given fields: diff
func (_m *IChallenger) SetPowDifficulty(diff int) {
	_m.Called(diff)
}

// NewIChallenger creates a new instance of IChallenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIChallenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *IChallenger {
	mock := &IChallenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
