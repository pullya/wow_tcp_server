// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Challenger is an autogenerated mock type for the Challenger type
type Challenger struct {
	mock.Mock
}

// Difficulty provides a mock function with given fields:
func (_m *Challenger) Difficulty() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Difficulty")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IsValid provides a mock function with given fields: challenge, response
func (_m *Challenger) IsValid(challenge string, response uint64) bool {
	ret := _m.Called(challenge, response)

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uint64) bool); ok {
		r0 = rf(challenge, response)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewChallenger creates a new instance of Challenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChallenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Challenger {
	mock := &Challenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
