// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IChallenger is an autogenerated mock type for the IChallenger type
type IChallenger struct {
	mock.Mock
}

// GetPowDifficulty provides a mock function with given fields:
func (_m *IChallenger) GetPowDifficulty() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPowDifficulty")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IsValidPoW provides a mock function with given fields: challenge, response
func (_m *IChallenger) IsValidPoW(challenge string, response uint64) bool {
	ret := _m.Called(challenge, response)

	if len(ret) == 0 {
		panic("no return value specified for IsValidPoW")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uint64) bool); ok {
		r0 = rf(challenge, response)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewIChallenger creates a new instance of IChallenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIChallenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *IChallenger {
	mock := &IChallenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
