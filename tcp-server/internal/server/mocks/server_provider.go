// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// ServerProvider is an autogenerated mock type for the ServerProvider type
type ServerProvider struct {
	mock.Mock
}

// ReceiveMessage provides a mock function with given fields: ctx, conn
func (_m *ServerProvider) ReceiveMessage(ctx context.Context, conn net.Conn) (string, error) {
	ret := _m.Called(ctx, conn)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, net.Conn) (string, error)); ok {
		return rf(ctx, conn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, net.Conn) string); ok {
		r0 = rf(ctx, conn)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, net.Conn) error); ok {
		r1 = rf(ctx, conn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Run provides a mock function with given fields: ctx
func (_m *ServerProvider) Run(ctx context.Context) (net.Listener, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 net.Listener
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (net.Listener, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) net.Listener); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Listener)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, conn, mess
func (_m *ServerProvider) SendMessage(ctx context.Context, conn net.Conn, mess []byte) error {
	ret := _m.Called(ctx, conn, mess)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, net.Conn, []byte) error); ok {
		r0 = rf(ctx, conn, mess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServerProvider creates a new instance of ServerProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerProvider {
	mock := &ServerProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
